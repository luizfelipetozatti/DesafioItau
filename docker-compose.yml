services:
  api-transferencia:
    build:
      context: .
      dockerfile: Dockerfile
    image: api-transferencia:latest
    container_name: api-transferencia
    networks:
      - main_net
    ports:
      - 8080:8080
    environment:
      URI_MONGODB: mongodb://root:pass@mongo
      BOOTSTRAP_SERVERS: kafka:29092
      URL_CLIENTES: wiremock:8080/clientes
      URL_NOTIFICACOES: wiremock:8080/notificacoes
      URL_CONTAS: wiremock:8080/contas
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    networks:
      - main_net
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: transferencias-topico:2:1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    networks:
      - main_net
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy

  mongo:
    image: mongo:4.4.17-focal
    container_name: mongodb
    networks:
      - main_net
    ports:
      - 3000:27018
    environment:
      MONGO_INITDB_DATABASE: api_transferencia
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    networks:
      - main_net
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://root:pass@mongo:27018/
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
    depends_on:
      mongo:
        condition: service_healthy

  wiremock:
    image: rodolpheche/wiremock:2.30.1
    container_name: wiremock
    networks:
      - main_net
    ports:
      - 9090:8080
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    networks:
      - main_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo 'ruok' | nc -w 1 localhost 2181 | grep -q imok" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

networks:
  main_net:
    driver: bridge